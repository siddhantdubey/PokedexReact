{"version":3,"sources":["SmallCard.js","PokemonList.js","Pagination.js","App.js","index.js"],"names":["SmallCard","name","infoURL","useState","imgURL","setImgURL","axios","get","then","res","data","sprites","back_default","class","id","src","PokemonList","pokemon","map","p","url","Pagination","gotoNextPage","gotoPrevPage","onClick","App","queryNum","setQueryNum","numRows","setPokemon","currentPageUrl","setCurrentPageUrl","nextPageUrl","setNextPageUrl","prevPageUrl","setPrevPageUrl","loading","setLoading","type","setType","types","undefined","useEffect","cancel","includes","cancelToken","CancelToken","c","console","log","next","previous","results","x","length","renderedOutput","Array","fill","i","slice","options","label","value","placeholder","onChange","event","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95bedc66.chunk.js","sourcesContent":["//this component will contain the pokemon info when they are not expanded\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport './SmallCard.css'\r\n\r\nexport default function SmallCard( { name, infoURL } ) {\r\n    const [imgURL, setImgURL]  = useState(\"\")\r\n\r\n    axios.get(infoURL).then(res => setImgURL(res.data.sprites.back_default))\r\n\r\n    return (\r\n        <div>\r\n            <div class='smallcard'>\r\n                <h4 id='name'>{name}</h4>\r\n                <img id='image' src={imgURL}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport SmallCard from './SmallCard'\r\nimport './PokemonList.css'\r\n\r\n\r\nexport default function PokemonList({ pokemon }) {\r\n    return (\r\n        <div class='grid-container'>\r\n            {pokemon.map(p => (\r\n                <div key={p.name} class='grid-item'>\r\n                    <SmallCard name={p.name} infoURL={p.url}/>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Pagination({ gotoNextPage, gotoPrevPage }) {\r\n    return (\r\n        //the first bits of these lines of codes check to see if there is a previous/next page to go to\r\n        <div>\r\n            {gotoPrevPage && <button onClick={gotoPrevPage}>Previous</button>} \r\n            {gotoNextPage && <button onClick={gotoNextPage}>Next</button>}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport PokemonList from \"./PokemonList\";\nimport Pagination from \"./Pagination\";\nimport axios from 'axios';\nimport './App.css'\nimport Select from 'react-select';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction closestMultipleOfFive(x){\n  return (x + (5-x%5))\n}\n\nfunction App() {\n\n  /*\n  We want the user to be able to:\n  - Pick the number of pokemon per page (we will do this by changing the offset number we pass through initially\n  - Sort pokemon by type (we can do this by directly altering the API call)\n  */\n\n  const [queryNum, setQueryNum] = useState(20)\n  const numRows = queryNum/5\n  const [pokemon, setPokemon] = useState([])\n  const [currentPageUrl, setCurrentPageUrl] = useState(\"https://pokeapi.co/api/v2/pokemon/\")\n  const [nextPageUrl, setNextPageUrl] = useState()\n  const [prevPageUrl, setPrevPageUrl] = useState()\n  const [loading, setLoading] = useState(true)\n  const [type, setType] = useState()\n  \n  const actions = [\n    { label: \"All\", value: \"All\"},\n    { label: \"Normal\", value: \"Normal\" },\n    { label: \"Fighting\", value: \"Fighting\" },\n    { label: \"Flying\", value: \"Flying\" },\n    { label: \"Poison\", value: \"Poison\" },\n    { label: \"Ground\", value: \"Ground\" },\n    { label: \"Rock\", value: \"Rock\" },\n    { label: \"Bug\", value: \"Bug\" },\n    { label: \"Ghost\", value:  \"Ghost\"},\n    { label: \"Steel\", value: \"Steel\" },\n    { label: \"Fire\", value: \"Fire\" },\n    { label: \"Water\", value: \"Water\" },\n    { label: \"Grass\", value: \"Grass\" },\n    { label: \"Electric\", value: \"Electric\" },\n    { label: \"Psychic\", value: \"Psychic\" },\n    { label: \"Ice\", value: \"Ice\" },\n    { label: \"Dragon\", value: \"Dragon\" },\n    { label: \"Dark\", value: \"Dark\" },\n    { label: \"Fairy\", value: \"Fairy\"},\n    { label: \"unknown\", value: \"unknown\" },\n    { label: \"Shadow\", value: \"Shadow\" },\n  ];\n\n\n  let types = {\n    'All': undefined,\n    'Normal': 1, \n    'Fighting': 2,\n    'Flying': 3,\n    'Poison': 4,\n    'Ground': 5,\n    'Rock': 6,\n    'Bug': 7,\n    'Ghost': 8,\n    'Steel': 9,\n    'Fire': 10,\n    'Water': 11,\n    'Grass': 12,\n    'Electric': 13,\n    'Psychic': 14,\n    'Ice': 15,\n    'Dragon': 16,\n    'Dark': 17,\n    'Fairy': 18,\n    'unknown': 10001,\n    'shadow': 10002\n  };\n  \n\n  useEffect(() => {\n    setLoading(true)\n    let cancel \n    let url\n    setQueryNum(20)\n    if(type === undefined || type === 'All'){\n      if(!(currentPageUrl.includes(\"https://pokeapi.co/api/v2/pokemon/\"))){\n        url = \"https://pokeapi.co/api/v2/pokemon/\"\n        setCurrentPageUrl(url)\n      }\n      axios.get(currentPageUrl, {\n        cancelToken: new axios.CancelToken(c => cancel = c) //this is so we can cancel old requests if the user spams the refresh button\n      }).then(res => {\n        setLoading(false)\n        console.log(res.data)\n        setNextPageUrl(res.data.next)\n        console.log(\"Next page url: \" + nextPageUrl)\n        setPrevPageUrl(res.data.previous)\n        console.log(\"Previous Page Url: \" + prevPageUrl)\n        setPokemon(res.data.results.map(p => p))\n      })\n    }\n    else{\n      url = \"https://pokeapi.co/api/v2/type/\" + types[type]\n      setCurrentPageUrl(url)\n      axios.get(currentPageUrl, {\n        cancelToken: new axios.CancelToken(c => cancel = c) //this is so we can cancel old requests if the user spams the refresh button\n      }).then(res => {\n        console.log(res.data.pokemon)\n        setLoading(false)\n        setQueryNum(closestMultipleOfFive(res.data.pokemon.length))\n        setPokemon(res.data.pokemon.map(p => p.pokemon))\n      })\n    }\n    \n    return () => cancel() \n    \n  }, [currentPageUrl, type])\n\n  function gotoNextPage() {\n    console.log(\"function called\")\n    setCurrentPageUrl(nextPageUrl)\n  }\n\n  function gotoPrevPage() {\n    setCurrentPageUrl(prevPageUrl)\n  }\n\n  if(loading) return \"Loading data ...\"\n  \n\n\n  var renderedOutput = Array(numRows).fill().map((x,i)=>i).map(\n    (x) => <PokemonList pokemon={pokemon.slice(x*5, (x+1)*5)}/>\n  ) //this bit of code adjusts the number of rows based on the number of pokemon queried\n\n  return (\n    <>\n      <Select options={ actions } placeholder=\"Select Pokemon Type\" onChange={ (event) => {setType(event.value); setNextPageUrl(nextPageUrl); setPrevPageUrl(prevPageUrl)} }/>\n      <h1>{ type } type Pokemon</h1>\n      <div>\n        {renderedOutput}\n      </div>\n      <Pagination\n        gotoNextPage={nextPageUrl ? gotoNextPage : null}\n        gotoPrevPage={prevPageUrl ? gotoPrevPage : null}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}